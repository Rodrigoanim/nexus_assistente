# Assessment DISC - Assistente NEXUS
# Fun√ß√£o: Assistente com conhecimento do manual NEXUS para ajudar usu√°rios
# Data: 06/06/2025

import os
import shutil
import streamlit as st
from dotenv import load_dotenv
from agno.agent import Agent
from agno.models.openai import OpenAIChat
from agno.knowledge.text import TextKnowledgeBase, TextReader
import re
from agno.vectordb.chroma import ChromaDb
from agno.storage.sqlite import SqliteStorage

# Carregar vari√°veis de ambiente
load_dotenv()

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Assistente NEXUS - Manual",
    page_icon="üìö",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Verificar se as chaves API est√£o configuradas
def check_api_keys():
    """Verifica se as chaves API est√£o configuradas"""
    openai_key = os.getenv('OPENAI_API_KEY')
    
    if not openai_key or openai_key == 'your_openai_api_key_here':
        st.error("‚ùå Chave API do OpenAI n√£o configurada!")
        st.info("Configure a vari√°vel OPENAI_API_KEY no Render.com ou no arquivo .env")
        return False
    
    return True

def search_manual_hybrid(query, manual_path="Manual_Geral_Nexus_2021_formatado.md"):
    """
    Busca h√≠brida: combina busca textual direta + busca sem√¢ntica
    """
    results = []
    
    try:
        with open(manual_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Termos relacionados a pontua√ß√£o
        pontuacao_terms = [
            'pontos', 'pontua√ß√£o', 'indexadores', 'performance', 'contribui√ß√µes',
            'aus√™ncia', 'faltar', 'presen√ßa', 'RDN', 'convidados', 'neg√≥cios fechados',
            'tabela de indexadores', 'sistema de pontua√ß√£o', 'cores', 'preto', 'vermelho',
            'amarelo', 'azul', 'verde', '5 pontos', '10 pontos', '15 pontos', '20 pontos'
        ]
        
        # Buscar termos relacionados na query
        query_lower = query.lower()
        relevant_terms = [term for term in pontuacao_terms if term in query_lower]
        
        # Se encontrou termos de pontua√ß√£o, buscar se√ß√µes espec√≠ficas
        if any(term in query_lower for term in ['pontos', 'pontua√ß√£o', 'indexadores', 'performance']):
            # Buscar se√ß√£o da Tabela de Indexadores
            tabela_match = re.search(r'\*\* Tabela de Indexadores \*\*.*?(?=\n---|\n# |\nPAGE|\Z)', content, re.DOTALL | re.IGNORECASE)
            if tabela_match:
                results.append({
                    'content': tabela_match.group(0),
                    'source': 'Tabela de Indexadores',
                    'relevance': 0.95
                })
            
            # Buscar sistema de pontua√ß√£o por cores
            cores_match = re.search(r'\*\* Sistema de pontua√ß√£o por cores \*\*.*?(?=\n---|\n# |\nPAGE|\Z)', content, re.DOTALL | re.IGNORECASE)
            if cores_match:
                results.append({
                    'content': cores_match.group(0),
                    'source': 'Sistema de Cores',
                    'relevance': 0.90
                })
            
            # Buscar contribui√ß√µes espec√≠ficas
            contrib_match = re.search(r'10\. Contribui√ß√µes.*?(?=\n11\.|\n---|\nPAGE|\Z)', content, re.DOTALL | re.IGNORECASE)
            if contrib_match:
                results.append({
                    'content': contrib_match.group(0),
                    'source': 'Se√ß√£o Contribui√ß√µes',
                    'relevance': 0.85
                })
        
        # Busca textual para termos espec√≠ficos
        for term in relevant_terms:
            pattern = rf'.{{0,200}}{re.escape(term)}.{{0,200}}'
            matches = re.finditer(pattern, content, re.IGNORECASE | re.DOTALL)
            for match in matches:
                snippet = match.group(0).strip()
                if len(snippet) > 50:  # Filtrar snippets muito pequenos
                    results.append({
                        'content': snippet,
                        'source': f'Busca por "{term}"',
                        'relevance': 0.75
                    })
        
        # Remover duplicatas e ordenar por relev√¢ncia
        unique_results = []
        seen_content = set()
        for result in sorted(results, key=lambda x: x['relevance'], reverse=True):
            content_key = result['content'][:100]  # Usar primeiros 100 chars como chave
            if content_key not in seen_content:
                seen_content.add(content_key)
                unique_results.append(result)
                if len(unique_results) >= 5:  # Limitar a 5 resultados
                    break
        
        return unique_results
        
    except Exception as e:
        print(f"# Debug - Erro na busca h√≠brida: {str(e)}")
        return []

def clean_message_content(content):
    """Limpa o conte√∫do da mensagem removendo HTML n√£o desejado"""
    import re
    import html
    
    # Debug: mostrar conte√∫do original
    print(f"# Debug - Conte√∫do original: {content[:200]}...")
    
    # Decodificar entidades HTML
    content = html.unescape(content)
    
    # Remover tags HTML de forma mais agressiva
    content = re.sub(r'<[^>]*>', '', content)
    
    # Remover entidades HTML restantes
    content = re.sub(r'&[a-zA-Z0-9#]+;', '', content)
    
    # Remover caracteres especiais de formata√ß√£o
    content = re.sub(r'```[^`]*```', '', content)  # Remove blocos de c√≥digo
    content = re.sub(r'`[^`]*`', '', content)      # Remove c√≥digo inline
    
    # Limpar espa√ßos extras e quebras de linha
    content = re.sub(r'\s+', ' ', content)
    content = re.sub(r'\n+', '\n', content)
    content = content.strip()
    
    # Debug: mostrar conte√∫do limpo
    print(f"# Debug - Conte√∫do limpo: {content[:200]}...")
    
    return content

def search_nexus_manual(query: str) -> str:
    """
    Busca informa√ß√µes espec√≠ficas no manual NEXUS usando busca h√≠brida.
    Ideal para encontrar informa√ß√µes sobre pontua√ß√£o, regras e procedimentos.
    """
    print(f"# Debug - Busca h√≠brida executada para: {query}")
    
    # Usar busca h√≠brida
    results = search_manual_hybrid(query)
    
    if not results:
        return "N√£o encontrei informa√ß√µes espec√≠ficas sobre sua consulta no manual NEXUS."
    
    # Montar resposta com os melhores resultados
    response_parts = []
    for i, result in enumerate(results[:3]):  # Top 3 resultados
        response_parts.append(f"**{result['source']}:**\n{result['content'][:800]}...")
        
    response = "\n\n".join(response_parts)
    print(f"# Debug - Busca h√≠brida encontrou {len(results)} resultados")
    return response

# A fun√ß√£o search_nexus_manual ser√° usada diretamente pelo agente atrav√©s das instru√ß√µes

# Inicializar base de conhecimento do NEXUS
def initialize_nexus_knowledge():
    """Inicializa a base de conhecimento do manual NEXUS"""
    try:
        # Configurar banco de dados vetorial com configura√ß√µes simples
        vector_db = ChromaDb(
            collection="nexus_manual_v4", 
            path="tmp/nexus_chromadb"
        )
        
        # Configurar leitor de texto com configura√ß√µes padr√£o confi√°veis
        text_reader = TextReader(
            chunk=True,
            chunk_size=2000  # Chunks grandes para garantir conte√∫do completo
        )
        
        # Verificar se o arquivo do manual existe
        manual_path = "Manual_Geral_Nexus_2021_formatado.md"
        if not os.path.exists(manual_path):
            st.error(f"‚ùå Arquivo do manual n√£o encontrado: {manual_path}")
            return None
        
        # Configurar base de conhecimento com o manual NEXUS
        knowledge = TextKnowledgeBase(
            path=manual_path,
            vector_db=vector_db,
            reader=text_reader
        )
        
        # Debug: informa√ß√µes sobre o arquivo
        file_size = os.path.getsize(manual_path)
        print(f"# Debug - Arquivo manual: {manual_path}")
        print(f"# Debug - Tamanho do arquivo: {file_size} bytes")
        
        # For√ßar carregamento da base de conhecimento
        try:
            print(f"# Debug - Carregando base de conhecimento...")
            
            # Verificar se o arquivo pode ser lido
            with open(manual_path, 'r', encoding='utf-8') as f:
                content = f.read()
                print(f"# Debug - Arquivo lido com sucesso: {len(content)} caracteres")
                print(f"# Debug - Primeiros 200 caracteres: {content[:200]}...")
            
            knowledge.load(recreate=True)
            print(f"# Debug - Base de conhecimento carregada com sucesso!")
            
            # Verificar se documentos foram criados
            try:
                # Tentar uma busca simples para verificar se h√° documentos
                test_docs = vector_db.search("NEXUS", limit=1)
                print(f"# Debug - Teste de busca encontrou: {len(test_docs) if test_docs else 0} documentos")
            except Exception as search_e:
                print(f"# Debug - Erro ao testar busca: {str(search_e)}")
                
        except Exception as e:
            print(f"# Debug - Erro ao carregar base: {str(e)}")
            st.error(f"‚ùå Erro ao carregar base de conhecimento: {str(e)}")
            return None
        
        return knowledge
        
    except Exception as e:
        st.error(f"‚ùå Erro ao inicializar base de conhecimento: {str(e)}")
        return None

# Inicializar agente NEXUS
def initialize_nexus_agent():
    """Inicializa o agente NEXUS com conhecimento do manual"""
    try:
        # Obter base de conhecimento
        knowledge = initialize_nexus_knowledge()
        
        if knowledge is None:
            return None
        
        # Configurar armazenamento
        db = SqliteStorage(
            table_name="nexus_assistant_session", 
            db_file="tmp/nexus_assistant.db"
        )
        
        # Criar agente NEXUS
        nexus_agent = Agent(
            name="Assistente NEXUS",
            model=OpenAIChat(id='gpt-4o-mini'),
            storage=db,
            knowledge=knowledge,
            instructions=[
                "Voc√™ √© um assistente especializado no manual do NEXUS - F√°brica de Neg√≥cios.",
                "Seu objetivo √© ajudar usu√°rios a entenderem o funcionamento, regras e metodologia do NEXUS.",
                "SEMPRE responda em portugu√™s brasileiro.",
                "SEMPRE busque informa√ß√µes na base de conhecimento antes de responder.",
                "Use APENAS informa√ß√µes do manual NEXUS para suas respostas.",
                "Se n√£o encontrar informa√ß√µes espec√≠ficas, diga claramente que n√£o encontrou.",
                "Seja preciso e cite as se√ß√µes ou p√°ginas do manual quando poss√≠vel.",
                "Forne√ßa respostas detalhadas usando as informa√ß√µes exatas do manual.",
                "Seja educado e profissional em suas respostas.",
                "Foque em ajudar o usu√°rio a entender melhor o NEXUS e suas pr√°ticas.",
                "IMPORTANTE: NUNCA use HTML, markdown ou formata√ß√£o especial em suas respostas.",
                "Responda apenas com texto simples e claro, sem tags ou c√≥digos.",
                "Quando perguntado sobre regras espec√≠ficas, sempre consulte o manual completo."
            ],
            description="Assistente especializado no manual do NEXUS para ajudar membros e interessados",
            add_history_to_messages=True,
            search_knowledge=True,
            num_history_runs=3,
            debug_mode=True
        )
        
        return nexus_agent
        
    except Exception as e:
        st.error(f"‚ùå Erro ao inicializar agente NEXUS: {str(e)}")
        return None

# Interface principal
def main():
    st.markdown("""
        <p style='
            text-align: center;
            font-size: 40px;
            font-weight: bold;
            color: #1f77b4;
        '>üìö Assistente NEXUS - Manual</p>
    """, unsafe_allow_html=True)
    
    st.markdown("""
        <p style='
            text-align: center;
            font-size: 18px;
            color: #666;
        '>Assistente especializado no manual do NEXUS - F√°brica de Neg√≥cios</p>
    """, unsafe_allow_html=True)
    
    # Verificar chaves API
    if not check_api_keys():
        st.stop()
    
    # Inicializar agente
    with st.spinner("üîÑ Inicializando assistente NEXUS..."):
        if "nexus_agent" not in st.session_state:
            st.session_state.nexus_agent = initialize_nexus_agent()
        agent = st.session_state.nexus_agent
    
    if agent is None:
        st.error("‚ùå N√£o foi poss√≠vel inicializar o assistente. Verifique as configura√ß√µes.")
        st.stop()
    
    st.success("‚úÖ Assistente NEXUS inicializado com sucesso!")
    
    # Op√ß√µes de administra√ß√£o da base de conhecimento
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if st.button("üîÑ Recarregar Base de Conhecimento"):
            with st.spinner("üîÑ Recarregando base de conhecimento..."):
                try:
                    # Limpar cache da sess√£o
                    if "nexus_agent" in st.session_state:
                        del st.session_state.nexus_agent
                    
                    knowledge = initialize_nexus_knowledge()
                    if knowledge:
                        st.success("‚úÖ Base de conhecimento recarregada com sucesso!")
                        st.info("üí° Configura√ß√µes otimizadas aplicadas")
                        st.rerun()
                    else:
                        st.error("‚ùå Erro ao recarregar base de conhecimento")
                except Exception as e:
                    st.error(f"‚ùå Erro ao recarregar: {str(e)}")
    
    with col2:
        if st.button("üóÑÔ∏è Recriar Base de Conhecimento"):
            with st.spinner("üóÑÔ∏è Recriando base de conhecimento do zero..."):
                try:
                    # Limpar cache da sess√£o
                    if "nexus_agent" in st.session_state:
                        del st.session_state.nexus_agent
                    
                    # Remover diret√≥rio ChromaDB para recriar do zero
                    if os.path.exists("tmp/nexus_chromadb"):
                        shutil.rmtree("tmp/nexus_chromadb")
                        print("# Debug - Diret√≥rio ChromaDB removido")
                    
                    # Garantir que diret√≥rio tmp existe
                    os.makedirs("tmp", exist_ok=True)
                    
                    knowledge = initialize_nexus_knowledge()
                    if knowledge:
                        st.success("‚úÖ Base de conhecimento recriada completamente!")
                        st.info("üí° Nova collection v4 criada com configura√ß√µes simples")
                        st.rerun()
                    else:
                        st.error("‚ùå Erro ao recriar base de conhecimento")
                except Exception as e:
                    st.error(f"‚ùå Erro ao recriar: {str(e)}")
                    print(f"# Debug - Erro detalhado ao recriar: {str(e)}")
    
    with col3:
        if st.button("üîç Testar Base de Conhecimento"):
            with st.spinner("üîç Testando base de conhecimento..."):
                try:
                    # Tentar uma busca direta na base
                    knowledge = initialize_nexus_knowledge()
                    if knowledge and hasattr(knowledge, 'vector_db'):
                        test_results = knowledge.vector_db.search("pontua√ß√£o", limit=3)
                        if test_results:
                            st.success(f"‚úÖ Encontrados {len(test_results)} documentos sobre pontua√ß√£o")
                            for i, doc in enumerate(test_results[:2]):
                                st.text(f"Doc {i+1}: {doc.content[:100]}...")
                        else:
                            st.warning("‚ö†Ô∏è Base criada mas nenhum documento encontrado")
                    else:
                        st.error("‚ùå N√£o foi poss√≠vel acessar a base de conhecimento")
                except Exception as e:
                    st.error(f"‚ùå Erro ao testar: {str(e)}")
                    print(f"# Debug - Erro ao testar base: {str(e)}")
    
    with col4:
        if st.button("üîç Teste Busca H√≠brida"):
            with st.spinner("üîç Testando busca h√≠brida..."):
                try:
                    # Testar busca h√≠brida diretamente
                    test_query = "sistema de pontua√ß√£o"
                    results = search_manual_hybrid(test_query)
                    
                    if results:
                        st.success(f"‚úÖ Busca h√≠brida encontrou {len(results)} resultados")
                        for i, result in enumerate(results[:2]):
                            st.text(f"Fonte: {result['source']}")
                            st.text(f"Relev√¢ncia: {result['relevance']}")
                            st.text(f"Conte√∫do: {result['content'][:150]}...")
                            st.divider()
                    else:
                        st.warning("‚ö†Ô∏è Busca h√≠brida n√£o encontrou resultados")
                        
                except Exception as e:
                    st.error(f"‚ùå Erro na busca h√≠brida: {str(e)}")
                    print(f"# Debug - Erro na busca h√≠brida: {str(e)}")
    
    # Interface de chat estilo WhatsApp com scroll
    st.markdown("---")
    st.markdown("### üí¨ Chat com Assistente NEXUS")
    
    # Inicializar hist√≥rico de chat na sess√£o
    if "chat_history" not in st.session_state:
        st.session_state.chat_history = []
    
    # Container principal do chat com altura fixa e scroll
    chat_container = st.container()
    
    with chat_container:
        # Container de chat com altura fixa e scroll usando st.container
        with st.container(height=400):
            # Exibir hist√≥rico de mensagens usando componentes nativos
            for message in st.session_state.chat_history:
                if message["role"] == "user":
                    with st.container():
                        st.markdown("""
                        <div style='background-color:#e3f2fd;padding:12px;margin:10px 0;border-left:4px solid #2196f3;border-radius:5px;'>
                            <strong>üë§ Voc√™:</strong><br>
                        </div>
                        """, unsafe_allow_html=True)
                        st.write(message["content"])
                else:
                    with st.container():
                        st.markdown("""
                        <div style='background-color:#f5f5f5;padding:12px;margin:10px 0;border-left:4px solid #4caf50;border-radius:5px;'>
                            <strong>ü§ñ Assistente NEXUS:</strong><br>
                        </div>
                        """, unsafe_allow_html=True)
                        st.write(message["content"])
    
    # √Årea de entrada fixa no rodap√©
    st.markdown("---")
    st.markdown("### üí¨ Enviar Mensagem")
    
    # Formul√°rio para entrada de mensagem
    with st.form("chat_form", clear_on_submit=True):
        col1, col2 = st.columns([4, 1])
        
        with col1:
            user_input = st.text_area(
                "Digite sua pergunta sobre o NEXUS:",
                height=60,
                placeholder="Ex: Como funciona o sistema de pontua√ß√£o? / Quais s√£o os requisitos para ser membro? / Como funcionam as RDNs?",
                key="user_input"
            )
        
        with col2:
            st.markdown("<br>", unsafe_allow_html=True)
            send_button = st.form_submit_button("üì§ Enviar", type="primary", use_container_width=True)
    
    # Processar envio de mensagem
    if send_button and user_input.strip():
        # Adicionar mensagem do usu√°rio ao hist√≥rico
        st.session_state.chat_history.append({
            "role": "user",
            "content": user_input.strip()
        })
        
        # Processar resposta do assistente
        with st.spinner("üîÑ Assistente NEXUS est√° digitando..."):
            try:
                # Primeiro, tentar busca h√≠brida para perguntas sobre pontua√ß√£o
                hybrid_results = None
                query_lower = user_input.strip().lower()
                
                # Verificar se √© uma pergunta sobre pontua√ß√£o/sistema
                if any(term in query_lower for term in ['pontos', 'pontua√ß√£o', 'indexadores', 'performance', 'contribui√ß√µes', 'sistema', 'faltar', 'aus√™ncia']):
                    print(f"# Debug - Detectada pergunta sobre pontua√ß√£o, usando busca h√≠brida...")
                    hybrid_results = search_manual_hybrid(user_input.strip())
                    print(f"# Debug - Busca h√≠brida encontrou {len(hybrid_results) if hybrid_results else 0} resultados")
                
                # Se a busca h√≠brida encontrou resultados, usar eles
                if hybrid_results:
                    print(f"# Debug - Usando resultados da busca h√≠brida")
                    response_parts = []
                    for result in hybrid_results[:2]:  # Top 2 resultados
                        response_parts.append(f"Baseado na {result['source']}:\n\n{result['content'][:600]}")
                    
                    content = "\n\n---\n\n".join(response_parts)
                    content += "\n\nEssas informa√ß√µes foram extra√≠das diretamente do manual NEXUS."
                    
                else:
                    # Usar agente normal se n√£o for sobre pontua√ß√£o ou busca h√≠brida falhou
                    print(f"# Debug - Usando agente normal...")
                    response = agent.run(user_input.strip(), stream=False)
                    
                    # Debug: mostrar resposta original
                    print(f"# Debug - Resposta original do agente: {response.content[:300]}...")
                    
                    # Limpar conte√∫do da resposta
                    content = clean_message_content(response.content)
                    
                    # Verifica√ß√£o final: remover qualquer HTML restante
                    if re.search(r'<[^>]+>', content):
                        print(f"# Debug - HTML ainda encontrado, limpando novamente...")
                        content = re.sub(r'<[^>]+>', '', content)
                        content = re.sub(r'&[a-zA-Z0-9#]+;', '', content)
                
                # Adicionar resposta do assistente ao hist√≥rico
                st.session_state.chat_history.append({
                    "role": "assistant",
                    "content": content
                })
                
                # For√ßar atualiza√ß√£o da interface
                st.rerun()
                
            except Exception as e:
                st.error(f"‚ùå Erro ao processar pergunta: {str(e)}")
    
    elif send_button and not user_input.strip():
        st.warning("‚ö†Ô∏è Por favor, digite uma pergunta.")
    
    # Bot√£o para limpar hist√≥rico
    if st.button("üóëÔ∏è Limpar Conversa"):
        st.session_state.chat_history = []
        st.rerun()
    
    # Exemplos de perguntas
    st.markdown("---")
    st.markdown("### üí° Exemplos de Perguntas")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        <div style='background-color:#f0f0f0;padding:10px;border-radius:5px;'>
            <h4>üìã Sobre Membros</h4>
            <ul>
                <li>Quais s√£o os requisitos para ser membro?</li>
                <li>Como funciona o sistema de pontua√ß√£o?</li>
                <li>Quais s√£o as regras de exclusividade?</li>
                <li>Como funciona a suspens√£o de cadeira?</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div style='background-color:#f0f0f0;padding:10px;border-radius:5px;'>
            <h4>ü§ù Sobre Contribui√ß√µes</h4>
            <ul>
                <li>Como funcionam as RDNs?</li>
                <li>Como registrar indica√ß√µes de neg√≥cios?</li>
                <li>Como funciona o sistema de convidados?</li>
                <li>Como registrar neg√≥cios fechados?</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    # Informa√ß√µes sobre o NEXUS
    st.markdown("---")
    st.markdown("### ‚ÑπÔ∏è Sobre o NEXUS")
    
    st.info("""
    **NEXUS - F√°brica de Neg√≥cios** √© uma comunidade de networking empresarial que:
    - Re√∫ne empres√°rios para gerar neg√≥cios
    - Utiliza metodologia estruturada de contribui√ß√µes
    - Promove networking qualificado
    - Oferece ambiente de conhecimento e crescimento
    """)
    
    # Informa√ß√µes do sistema
    st.markdown("---")
    st.markdown("### ‚ÑπÔ∏è Informa√ß√µes do Sistema")
    
    env = os.getenv('ENVIRONMENT', 'development')
    debug = os.getenv('DEBUG', 'False')
    
    st.info(f"""
    - **Ambiente**: {env}
    - **Debug**: {debug}
    - **Modelo**: GPT-4o-mini (OpenAI)
    - **Vers√£o**: Assistente NEXUS v1.0
    - **Base de Conhecimento**: Manual NEXUS 2021
    """)

if __name__ == "__main__":
    main() 