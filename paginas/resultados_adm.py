# resultados_adm.py
# M√≥dulo de administra√ß√£o para visualiza√ß√£o de an√°lises de usu√°rios
# Data: 29/07/2025 - Hora: 29:00

import streamlit as st
import sqlite3
import pandas as pd
from config import DB_PATH
from paginas.monitor import registrar_acesso
# from paginas.resultados import show_results  # Removido - usando redirecionamento

def show_resultados_adm():
    """
    M√≥dulo administrativo para visualiza√ß√£o de an√°lises de usu√°rios.
    Permite que perfis 'master' e 'adm' selecionem usu√°rios e visualizem suas an√°lises.
    """
    
    # Verificar se o usu√°rio tem perfil master ou adm
    user_profile = st.session_state.get("user_profile", "").lower()
    if user_profile not in ["master", "adm"]:
        st.error("‚ùå **Acesso n√£o autorizado.** Esta p√°gina √© restrita para usu√°rios Master e Administradores.")
        return
    
    # Registrar acesso
    registrar_acesso(
        user_id=st.session_state.get("user_id"),
        programa="resultados_adm.py",
        acao="acesso_modulo_admin"
    )
    
    # T√≠tulo da p√°gina
    st.markdown("""
        <p style='text-align: center; font-size: 30px; font-weight: bold;'>
            üìä Administra√ß√£o - An√°lises de Usu√°rios
        </p>
    """, unsafe_allow_html=True)
    
    # Informa√ß√µes da sess√£o admin
    st.markdown(f"""
        <div style='background-color:#e8f4f8;padding:15px;border-radius:5px;margin-bottom:20px;'>
            <p style='font-size:14px;color:#333;'>
                <strong>üë§ Administrador:</strong> {st.session_state.get('user_name')}<br>
                <strong>üîë Perfil:</strong> {st.session_state.get('user_profile')}<br>
                <strong>üìã Fun√ß√£o:</strong> Visualizar an√°lises de usu√°rios cadastrados
            </p>
        </div>
    """, unsafe_allow_html=True)
    
    # Verificar se o banco existe
    if not DB_PATH.exists():
        st.error(f"‚ùå **Banco de dados n√£o encontrado:** {DB_PATH}")
        return
    
    try:
        # Conectar ao banco
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # Buscar usu√°rios cadastrados
        cursor.execute("""
            SELECT user_id, nome, email, perfil, empresa 
            FROM usuarios 
            WHERE perfil = 'usuario'
            ORDER BY nome
        """)
        usuarios = cursor.fetchall()
        
        if not usuarios:
            st.warning("‚ö†Ô∏è **Nenhum usu√°rio encontrado** na base de dados.")
            return
        
        # Criar DataFrame para melhor manipula√ß√£o
        df_usuarios = pd.DataFrame(usuarios, columns=['User ID', 'Nome', 'Email', 'Perfil', 'Empresa'])
        
        # Exibir estat√≠sticas
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Total de Usu√°rios", len(usuarios))
        with col2:
            empresas_unicas = len(df_usuarios['Empresa'].dropna().unique())
            st.metric("Empresas Cadastradas", empresas_unicas)
        with col3:
            # Verificar quantos usu√°rios t√™m an√°lises
            cursor.execute("""
                SELECT COUNT(DISTINCT user_id) 
                FROM forms_resultados 
                WHERE user_id IN (SELECT user_id FROM usuarios WHERE perfil = 'usuario')
            """)
            usuarios_com_analises = cursor.fetchone()[0]
            st.metric("Usu√°rios com An√°lises", usuarios_com_analises)
        
        st.markdown("---")
        
        # Interface de pesquisa e sele√ß√£o
        st.markdown("### üîç Pesquisar e Selecionar Usu√°rio")
        
        # Campo de pesquisa
        pesquisa = st.text_input(
            "Digite nome ou email para pesquisar:",
            placeholder="Ex: Jo√£o Silva ou joao@empresa.com",
            key="pesquisa_usuario"
        )
        
        # Filtrar usu√°rios baseado na pesquisa
        if pesquisa:
            mascara = (
                df_usuarios['Nome'].str.contains(pesquisa, case=False, na=False) |
                df_usuarios['Email'].str.contains(pesquisa, case=False, na=False)
            )
            df_filtrado = df_usuarios[mascara]
        else:
            df_filtrado = df_usuarios
        
        if len(df_filtrado) == 0:
            st.warning("üîç **Nenhum usu√°rio encontrado** com os crit√©rios de pesquisa.")
            return
        
        # Exibir tabela de usu√°rios filtrados
        st.markdown(f"**Usu√°rios encontrados:** {len(df_filtrado)}")
        
        # Criar lista para sele√ß√£o
        opcoes_usuarios = []
        for _, usuario in df_filtrado.iterrows():
            opcao = f"{usuario['Nome']} ({usuario['Email']}) - ID: {usuario['User ID']}"
            opcoes_usuarios.append((opcao, usuario['User ID']))
        
        # Seletor de usu√°rio
        if opcoes_usuarios:
            opcao_selecionada = st.selectbox(
                "üìã **Selecione o usu√°rio que deseja analisar:**",
                options=[opcao[0] for opcao in opcoes_usuarios],
                index=None,
                placeholder="Escolha um usu√°rio da lista...",
                key="usuario_selecionado"
            )
            
            if opcao_selecionada:
                # Encontrar o user_id correspondente
                user_id_selecionado = None
                for opcao, user_id in opcoes_usuarios:
                    if opcao == opcao_selecionada:
                        user_id_selecionado = user_id
                        break
                
                if user_id_selecionado:
                    # Exibir informa√ß√µes do usu√°rio selecionado
                    usuario_info = df_filtrado[df_filtrado['User ID'] == user_id_selecionado].iloc[0]
                    
                    st.success(f"‚úÖ **Usu√°rio selecionado:** {usuario_info['Nome']}")
                    
                    # Verificar se o usu√°rio tem an√°lises
                    cursor.execute("""
                        SELECT COUNT(*) 
                        FROM forms_resultados 
                        WHERE user_id = ?
                    """, (user_id_selecionado,))
                    tem_analises = cursor.fetchone()[0] > 0
                    
                    col1, col2 = st.columns([1, 1])
                    
                    with col1:
                        st.markdown(f"""
                            **üìã Informa√ß√µes do Usu√°rio:**
                            - **Nome:** {usuario_info['Nome']}
                            - **Email:** {usuario_info['Email']}
                            - **ID:** {usuario_info['User ID']}
                            - **Empresa:** {usuario_info['Empresa'] or 'N√£o informada'}
                        """)
                    
                    with col2:
                        if tem_analises:
                            st.success("‚úÖ **Status:** Usu√°rio possui an√°lises DISC")
                            
                            # Bot√£o para visualizar an√°lises
                            if st.button("üîç **Visualizar An√°lises DISC**", use_container_width=True, type="primary"):
                                # Registrar acesso √† an√°lise
                                registrar_acesso(
                                    user_id=st.session_state.get("user_id"),
                                    programa="resultados_adm.py",
                                    acao=f"visualizar_analise_usuario_{user_id_selecionado}"
                                )
                                
                                # Armazenar dados para redirecionamento
                                st.session_state["admin_view_user_id"] = user_id_selecionado
                                st.session_state["admin_view_user_name"] = usuario_info['Nome']
                                st.session_state["redirect_to_analysis"] = True
                                
                                # Redirecionar para a p√°gina de an√°lises
                                st.rerun()
                        else:
                            st.warning("‚ö†Ô∏è **Status:** Usu√°rio ainda n√£o realizou an√°lises DISC")
                            st.info("üí° **Orienta√ß√£o:** Este usu√°rio precisa completar as avalia√ß√µes de perfil e comportamento primeiro.")
        
        # Tabela resumo (opcional, pode ser colocada em um expander)
        with st.expander("üìã **Ver todos os usu√°rios cadastrados**", expanded=False):
            st.dataframe(
                df_filtrado,
                use_container_width=True,
                hide_index=True
            )
    
    except sqlite3.Error as e:
        st.error(f"‚ùå **Erro de banco de dados:** {str(e)}")
    except Exception as e:
        st.error(f"‚ùå **Erro inesperado:** {str(e)}")
    finally:
        if 'conn' in locals():
            conn.close() 